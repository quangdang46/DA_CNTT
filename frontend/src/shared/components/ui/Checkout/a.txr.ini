{
  "customer_name": "Nguyễn Văn A",
  "customer_email": "example@example.com",
  "customer_phone": "0123456789",
  "address_id": 456, // ID địa chỉ (null nếu nhập địa chỉ mới)
  "shipping_address": {
    "city": "Hà Nội",
    "district": "Ba Đình",
    "ward": "Phường Điện Biên",
    "address": "Số 123, Đường ABC"
  },
  "order_items": [
    {
      "product_id": 1,
      "quantity": 2,
      "price": 100000
    },
    {
      "product_id": 2,
      "quantity": 1,
      "price": 50000
    }
  ],
  "total_price": 250000, // Backend có thể tính lại để đảm bảo chính xác
  "shipping_partner": "GHN", // Đơn vị vận chuyển
  "shipping_fee": 30000, // Phí vận chuyển
  "estimated_delivery_time": "2023-11-15 12:00:00", // Thời gian giao hàng dự kiến
  "payment_method": "QR", // Phương thức thanh toán
  "payment_gateway": "VNPay", // Cổng thanh toán
  "note": "Vui lòng giao hàng vào buổi sáng.", // Ghi chú của khách hàng
  "coupon_code": "SALE10" // Mã giảm giá (tùy chọn)
}

profile
Qwen2.5-Max
4:50 pm
Khi tích hợp VNPay (cổng thanh toán) và GHTK (đơn vị vận chuyển), backend cần xử lý thêm các bước cụ thể để đảm bảo quy trình checkout hoạt động trơn tru. Dưới đây là chi tiết cách backend xử lý từng phần:

1. Kiểm tra tính hợp lệ
a. Kiểm tra tồn kho sản phẩm :
Backend sẽ kiểm tra số lượng sản phẩm trong kho dựa trên product_id và quantity được gửi từ frontend.
Nếu số lượng yêu cầu vượt quá tồn kho, trả về lỗi với thông báo "Sản phẩm không đủ hàng".
Cập nhật tạm thời số lượng sản phẩm trong kho (giữ lại hàng) để tránh trường hợp người khác mua cùng lúc.
b. Xác thực mã giảm giá (nếu có) :
Backend sẽ kiểm tra mã giảm giá (coupon_code) trong cơ sở dữ liệu:
Kiểm tra mã giảm giá có tồn tại không.
Kiểm tra điều kiện áp dụng (ví dụ: hạn sử dụng, số lần sử dụng, giá trị đơn hàng tối thiểu).
Tính toán giá trị giảm giá và cập nhật tổng giá trị đơn hàng sau khi áp dụng mã giảm giá.
c. Tính toán tổng giá trị đơn hàng và phí vận chuyển :
Backend sẽ tính toán:
Tổng giá trị sản phẩm: SUM(quantity * price) cho tất cả các sản phẩm trong order_items.
Phí vận chuyển: Gọi API của GHTK hoặc GHN để tính phí vận chuyển dựa trên địa chỉ giao hàng (city, district, ward) và trọng lượng đơn hàng.
Tổng giá trị cuối cùng: total_price = product_total + shipping_fee - discount.
2. Tạo đơn hàng
a. Lưu thông tin đơn hàng vào bảng orders :
Backend sẽ lưu thông tin đơn hàng vào bảng orders với các trường như:
user_id (hoặc guest_id nếu là khách vãng lai).
Thông tin khách hàng (customer_name, customer_email, customer_phone).
Địa chỉ giao hàng (address_id hoặc thông tin địa chỉ mới).
Tổng giá trị đơn hàng (total_price).
Trạng thái đơn hàng ban đầu (status = 'processing').
Trạng thái vận chuyển (shipping_status = 'pending').
Trạng thái thanh toán (payment_status = 'pending').
b. Lưu chi tiết sản phẩm vào bảng order_items :
Backend sẽ lưu từng sản phẩm trong giỏ hàng vào bảng order_items với các trường:
order_id: ID của đơn hàng vừa tạo.
product_id: ID sản phẩm.
quantity: Số lượng sản phẩm.
price: Giá sản phẩm tại thời điểm đặt hàng.
3. Xử lý thanh toán
a. Nếu phương thức thanh toán là QR (VNPay) :
Backend sẽ gọi API của VNPay để tạo một giao dịch thanh toán:
Truyền các thông tin cần thiết như:
amount: Tổng giá trị đơn hàng.
order_id: ID của đơn hàng.
customer_name, customer_email, customer_phone.
payment_method: Phương thức thanh toán (QR).
VNPay sẽ trả về một URL thanh toán. Backend sẽ trả URL này về frontend để chuyển hướng người dùng đến cổng thanh toán.
Sau khi người dùng hoàn thành thanh toán trên VNPay:
VNPay sẽ gửi thông báo (callback) đến backend với trạng thái giao dịch.
Backend sẽ cập nhật trạng thái thanh toán trong bảng payments:
payment_status: success nếu thanh toán thành công, failed nếu thất bại.
paid_at: Thời gian thanh toán.
vnpay_data: Lưu toàn bộ dữ liệu phản hồi từ VNPay dưới dạng JSON.
b. Nếu phương thức thanh toán là tiền mặt (COD) :
Backend sẽ giữ nguyên trạng thái thanh toán là pending và chờ xác nhận thanh toán khi giao hàng.
4. Xử lý vận chuyển (GHTK)
a. Tạo đơn hàng vận chuyển trên GHTK :
Backend sẽ gọi API của GHTK để tạo đơn hàng vận chuyển:
Truyền các thông tin cần thiết như:
Thông tin người gửi (từ cửa hàng của bạn).
Thông tin người nhận (customer_name, customer_phone, shipping_address).
Danh sách sản phẩm và trọng lượng.
Phí vận chuyển đã tính toán trước đó.
GHTK sẽ trả về:
tracking_code: Mã vận đơn.
tracking_url: Đường dẫn theo dõi đơn hàng.
estimated_delivery_time: Thời gian giao hàng dự kiến.
Backend sẽ cập nhật các thông tin này vào bảng orders:
tracking_code: Mã vận đơn.
tracking_url: Đường dẫn theo dõi.
estimated_delivery_time: Thời gian giao hàng dự kiến.
b. Cập nhật trạng thái vận chuyển :
Backend sẽ lắng nghe các sự kiện từ GHTK (qua webhook hoặc polling):
Khi đơn hàng được giao cho shipper: Cập nhật shipped_at và shipping_status = 'shipped'.
Khi đơn hàng đang vận chuyển: Cập nhật shipping_status = 'in_transit'.
Khi đơn hàng được giao thành công: Cập nhật delivered_at và shipping_status = 'delivered'.
5. Lưu lịch sử trạng thái
Mỗi khi có thay đổi trạng thái đơn hàng (ví dụ: từ processing sang shipped), backend sẽ lưu lịch sử trạng thái vào bảng order_status_history:
order_id: ID của đơn hàng.
status: Trạng thái mới.
changed_at: Thời gian thay đổi.
note: Ghi chú lý do thay đổi (nếu có).
Ví dụ luồng xử lý với VNPay và GHTK
Frontend gửi request checkout :
Gửi thông tin khách hàng, sản phẩm, địa chỉ, phương thức thanh toán (QR), và đơn vị vận chuyển (GHTK).
Backend xử lý :
Kiểm tra tồn kho, mã giảm giá, và tính phí vận chuyển.
Tạo đơn hàng trong bảng orders và order_items.
Gọi API của VNPay để tạo giao dịch thanh toán và trả về URL thanh toán.
Gọi API của GHTK để tạo đơn hàng vận chuyển và cập nhật thông tin vận chuyển.
Người dùng thanh toán :
Người dùng hoàn thành thanh toán trên VNPay.
VNPay gửi callback về backend để xác nhận thanh toán.
Backend cập nhật trạng thái :
Cập nhật trạng thái thanh toán trong bảng payments.
Lắng nghe sự kiện từ GHTK để cập nhật trạng thái vận chuyển.
Hoàn tất :
Đơn hàng được giao thành công và cập nhật trạng thái cuối cùng.
